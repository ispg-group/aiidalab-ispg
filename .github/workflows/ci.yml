# Run basic tests for this app on the latest aiidalab/full-stack docker image.

name: continuous-integration

on:
    [push]

jobs:

  # Adapted from: https://github.com/aiidalab/aiidalab-qe
  pre-commit:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip
          cache-dependency-path: |
            .pre-commit-config.yaml
            **/setup.cfg
            **/pyproject.toml
            **/requirements*.txt

      - name: Install dependencies
        run: python -m pip install pre-commit~=2.20

      - name: Run pre-commit
        run: pre-commit run --all-files || ( git status --short; git diff; exit 1 )


  test-app:

    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        tag: [latest]
        image: ["aiidalab/full-stack"]
        browser: [Firefox, Chrome]
      fail-fast: false

    steps:

      - name: Check out app
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
            python-version: "3.10"
            cache: pip
            cache-dependency-path: |
              **/setup.cfg
              **/pyproject.toml
              **/requirements*.txt

      - name: Install dependencies for tests
        run: pip install -U -r requirements-test.txt

      - name: Set jupyter token env
        run: echo "JUPYTER_TOKEN=$(openssl rand -hex 32)" >> $GITHUB_ENV

      # The Firefox and its engine geckodrive need do be installed manually to run
      # selenium tests.
      - name: Install Firefox
        if: matrix.browser == 'Firefox'
        uses: browser-actions/setup-firefox@latest
        with:
          firefox-version: latest

      - name: Install geckodriver
        if: matrix.browser == 'Firefox'
        run: |
          wget -c https://github.com/mozilla/geckodriver/releases/download/v0.30.0/geckodriver-v0.30.0-linux64.tar.gz
          tar xf geckodriver-v0.30.0-linux64.tar.gz -C /usr/local/bin

      - name: Run pytest
        run: pytest -v -s --driver ${{ matrix.browser }}
        env:
          TAG: ${{ matrix.tag }}
          IMAGE: ${{ matrix.image }}

      - name: Upload screenshots as artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Screenshots-${{ matrix.tag }}-${{ matrix.browser }}
          path: '~/screenshots/'
          if-no-files-found: error
