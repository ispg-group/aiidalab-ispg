# Run basic tests for this app on the latest aiidalab/full-stack docker image.

name: continuous-integration

on:
  [push]

jobs:

  test-app:

    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        tag: [latest]
        image: ["aiidalab/full-stack"]
        python-version: [3.8]

        # Chrome seems to fail fairly often with timeout errors coming from
        # the selenium.get_screenshot_as_file()
        # ```
        # WARNING: Failed to gather screenshot: Message: timeout: Timed out receiving message from renderer: 10.000
        # ```
        # Googling around, this seems to be a common problem so disabling for now.
        # browser: [ chrome, firefox ]
        browser: [Firefox]
      fail-fast: false

    steps:

      - name: Check out app
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
            python-version: ${{ matrix.python-version }}
            cache: pip
            cache-dependency-path: |
              **/setup.cfg
              **/pyproject.toml
              **/requirements*.txt

      - name: Install dependencies for tests
        run: pip install -U -r requirements-test.txt

      - name: Set jupyter token env
        run: echo "JUPYTER_TOKEN=$(openssl rand -hex 32)" >> $GITHUB_ENV

      # The Firefox and its engine geckodrive need do be installed manually to run
      # selenium tests.
      - name: Install Firefox
        if: matrix.browser == 'Firefox'
        uses: browser-actions/setup-firefox@latest
        with:
            firefox-version: ${{ matrix.firefox }}

      - name: Install geckodriver
        if: matrix.browser == 'Firefox'
        run: |
            wget -c https://github.com/mozilla/geckodriver/releases/download/v0.30.0/geckodriver-v0.30.0-linux64.tar.gz
            tar xf geckodriver-v0.30.0-linux64.tar.gz -C /usr/local/bin

      - name: Run pytest
        run: pytest --driver ${{ matrix.browser }}
        env:
            TAG: ${{ matrix.tag }}
            IMAGE: ${{ matrix.image }}

      - name: Upload screenshots as artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Screenshots-${{ matrix.image }}-${{ matrix.tag }}-${{ matrix.browser }}
          path: 'screenshots/'
